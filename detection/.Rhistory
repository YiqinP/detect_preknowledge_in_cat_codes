sim_data$Y[right_compromised[i,1],right_compromised[i,2]]<-1
}
}
#add id
id<-matrix(as.numeric(c(1:person_num)),ncol=1)
id<-data.frame(id)
sim_data$id<-id
return(list(sim_data=sim_data,expo_id=expo_id,expo_item=expo_item,right_compromised=right_compromised,item_num =item_num))
}
recode_data<-function(sim_data){
#rt matrix
rt = data.frame(sim_data$sim_data$RT)
rt<-data.frame(t(t(rt-rowMeans(rt))-colMeans(rt)))
rt[rt>median(as.matrix(rt))]=0
rt<-data.frame(rt*sim_data$sim_data$Y)
#aberrance matrix (noted as ir)
ir<-rt
ir[ir!=0]=1
rt_org = data.frame(sim_data$sim_data$RT)
rt_org[ir==0]=0
return(list(id=sim_data$sim_data$id,rt=rt,ir=ir, rt_org = rt_org))
}
clustering<-function(data,k_num){
rt<-data$rt
ir<-data$ir
id<-data$id
#Hierachy cluster
clusterCut <- cutree(hclust(dist(ir)), k_num)
#combine the class and time: the rt matrix +id in the last col
rt_cluster <- data.frame(rt,id=id,cluster=clusterCut)
ir_cluster <- data.frame(ir,id=id,cluster=clusterCut)
clustering_sum <- list(rt_cluster=rt_cluster,ir_cluster=ir_cluster)
return(clustering_sum)
}
clust_table<-function(cluster_sum,cof,data){
stat_cl<-function(cl_id){
cl<-cl_res[which(cl_res[,"cluster"]==cl_id),]
id<-cl[,"id"]
rt_data = data$rt[id,]
ir_data = data$ir[id,]
n_id<-length(id)
id<-paste(id,collapse = ",")
cl[,c("id","cluster")]<-NULL
rt_sum = colSums(rt_data)
ir_sum = colSums(ir_data)
col_name_1 = colnames(cl[which(ir_sum>(n_id*cof))])
tmp = as.matrix(rt_data)
tmp[which(tmp==0)]=NA
cur_rt_med = max(median(tmp,na.rm=TRUE),mean(tmp,na.rm=TRUE))
col_name_2 = colnames(cl[which((rt_sum/ir_sum)<cur_rt_med)])
col_name = intersect(col_name_1,col_name_2)
col_name_d<-gsub("X","",col_name)
n_item<-length(col_name)
item<-paste(col_name,collapse = ",")
item_nx<-paste(col_name_d,collapse = ",")
return(data.frame(cl_id=cl_id,n_id=n_id,id=id,n_fit=n_item,fit=item,fit_nx=item_nx, fit_nx_final=item_nx))
}
cl_res<-as.data.frame(cluster_sum$ir_cluster)
return(rbind(stat_cl(1),stat_cl(2)))
}
detection<-function(data,cl_table,k_num,cof,least_num){
if( (cl_table[1,"fit"]!= ""  && cl_table[1,"fit"]==cl_table[2,"fit"])
|(cl_table[1,"n_id"]<least_num|cl_table[2,"n_id"]<least_num))
{
return(cl_table)
}else{
data_1<-data_split(cl_table[1,"id"],data)
cl_table_1<-detection_single(data,data_1,k_num,cof)
if(cl_table_1[1,"n_id"]<least_num|cl_table_1[2,"n_id"]<least_num){
res_1<-cl_table[1,]
}
else{res_1<-detection(data,cl_table_1,k_num,cof,least_num)}
data_2<-data_split(cl_table[2,"id"],data)
cl_table_2<-detection_single(data,data_2,k_num,cof)
if(cl_table_2[1,"n_id"]<least_num|cl_table_2[2,"n_id"]<least_num){
res_2<-cl_table[2,]
}else{
res_2<-detection(data,cl_table_2,k_num,cof,least_num)}
res_t<-rbind(res_1=res_1,res_2=res_2)
return(res_t)
}
}
decision_process<-function(dete_table,data, fit_num_cri){
dete_table<-index_calc(dete_table, data)
#detele the groups with fit_num<4
arr_ind = which(dete_table$n_fit<fit_num_cri)
if(length(arr_ind)!=0){
filter_result<-dete_table[-arr_ind,]
}else{
filter_result<-dete_table
}
if(nrow(filter_result)!=0){
group_info = filter_result[which.min(filter_result$avg_rt),]
}else{
group_info = NULL
}
return(list(group_info=group_info))
}
evaluation=function(sim_data,data,detected_groups){
detected_group = detected_groups$group_info
if(is.null(detected_group)){
if(length(sim_data$expo_item)==0){
return(list(false_neg=0,false_posi=0,endo=-99))
}else{
return(list(false_neg=1,false_posi=0,endo=-99))
}
}
solution=sim_data$expo_item
solution_x = paste('X',solution,sep='')
answer=unlist(strsplit(matrix(detected_group$fit_nx_final),","))
answer_x = paste('X',answer,sep='')
cheater = as.integer(strsplit(as.character(detected_group$id),",")[[1]])
rt = data$rt
rt[rt==0]=NA
rt = as.matrix(rt)
ewp_ci = mean(rt[cheater,answer_x],na.rm=TRUE)
newp_ci = mean(rt[-cheater,answer_x],na.rm=TRUE)
rarp=(colMeans(as.matrix(rt[-cheater,answer_x]),na.rm=TRUE))/(colMeans(as.matrix(rt[cheater,answer_x]),na.rm=TRUE))
if(newp_ci/(ewp_ci)>0.99){
answer = answer[which(rarp<0.99)]
}
correct=intersect(solution,answer)
false_neg=1-length(correct) /length(solution)
false_posi=(length(answer)-length(correct)) /(sim_data$item_num-length(solution))
print(paste(round(false_neg,3),round(false_posi,3),sep = ', '))
tmp1 = rt[cheater,]
tmp2 = rt[-cheater,]
incorrect=as.integer(setdiff(answer,correct))
correct=as.integer(correct)
correct_post = colMeans(as.matrix(tmp1[,correct]),na.rm=TRUE)/colMeans(as.matrix(tmp2[,correct]),na.rm=TRUE)
incorrect_post = colMeans(as.matrix(tmp1[,incorrect]),na.rm=TRUE)/colMeans(as.matrix(tmp2[,incorrect]),na.rm=TRUE)
return(list(false_neg=false_neg,false_posi=false_posi,avg_rt=detected_group$avg_rt_org,correct_post=correct_post,incorrect_post=incorrect_post))
}
##data split
data_split<-function(group,data){
data_x<-NULL
##print('heheh')
if(group!=""){
##print('iii')
id<-c(as.integer(strsplit(as.character(group),",")[[1]]))
##print('id')
data_x$id<-data$id[id,]
data_x$rt<-data$rt[id,]
data_x$ir<-data$ir[id,]
data_x$rt_org<-data$rt_org[id,]
}
return(data_x)
}
data_split_2<-function(srow_dt,data){
data_sin<-NULL
if(srow_dt[1,"n_fit"]!=0){
#View(data)
#View(srow_dt)
data_sin<-data_split(srow_dt[1,"id"],data)
item<-c((strsplit(as.character(srow_dt[1,"fit"]),",")[[1]]))
data_sin$rt<-data_sin$rt[item]
data_sin$ir<-data_sin$ir[item]
data_sin$rt_org<-data_sin$rt_org[item]
}
return(data_sin)
}
####
detection_single<-function(data,cur_data,k_num,cof){
cl_table<-clust_table(clustering(cur_data,k_num),cof,data)
return(cl_table)
}
index_calc<-function(cl_table, data){
cl_table$avg_rt<-NULL
for(i in 1:nrow(cl_table)){
si_data<-data_split_2(cl_table[i,],data)
if(!is.null(si_data)){
cl_table[i,"avg_rt"]<-avg_rt(si_data)
}else{
cl_table[i,"avg_rt"]<-NA
}
}
return(cl_table)
}
#index calculation
avg_rt<-function(data){
rt<-as.data.frame(data$rt)
ir<-as.data.frame(data$ir)
colsum_rt<-colSums(rt)/colSums(ir)
avg_rt<-median(colsum_rt)
return(avg_rt)
}
condi_matri_gene<-function(person_num,item_num,expo_rate_ppl,expo_rate_item){
condi_matri<-data.frame(NULL)
for(a in 1:length(person_num)){
for(b in 1:length(item_num)){
for(c in 1:length(expo_rate_ppl)){
for(d in 1:length(expo_rate_item)){
cur_cond<-c(person_num[a],item_num[b],expo_rate_ppl[c],expo_rate_item[d])
condi_matri<-rbind(condi_matri,cur_cond)
}}}}
colnames(condi_matri)<-c("person_num","item_num","expo_rate_ppl","expo_rate_item")
return(condi_matri)
}
process_single<-function(person_num,item_num,expo_rate_ppl,expo_rate_item,time_up,time_down,cof,perent_lc,ad_rate,fit_num_cri,k_num){
sim_data <- simu_data(person_num,item_num,expo_rate_ppl,expo_rate_item,time_up,time_down)
data<-recode_data(sim_data)
cl_table<-detection_single(data,data,k_num,cof)
dete_table<-detection(data,cl_table,k_num,cof,perent_lc)
row.names(dete_table)<-c(1:nrow(dete_table))
detected_groups<-decision_process(dete_table,data,fit_num_cri)
perform<-evaluation(sim_data,data,detected_groups)
return(perform)
}
process<-function(person_num,item_num,expo_rate_ppl,expo_rate_item,time_up,time_down,cof,perent_lc,ad_rate,fit_num_cri,num_sim,k_num){
condi_matri<-condi_matri_gene(person_num,item_num,expo_rate_ppl,expo_rate_item)
result_fn<-NULL
result_fp<-NULL
result_avg_rt<-NULL
correct_post_all_condi<-NULL
incorrect_post_all_condi<-NULL
for(i in 1:num_sim){
#print(i)
res_fn_all_condi<-NULL
res_fp_all_condi<-NULL
res_avg_rt_all_condi<-NULL
for(ii in 1:nrow(condi_matri)){
perform<-process_single(condi_matri$person_num[ii],condi_matri$item_num[ii],condi_matri$expo_rate_ppl[ii],condi_matri$expo_rate_item[ii],time_up,time_down,cof,perent_lc,ad_rate,fit_num_cri,k_num)
res_fn_all_condi<-cbind(res_fn_all_condi,perform$false_neg)
res_fp_all_condi<-cbind(res_fp_all_condi,perform$false_posi)
res_avg_rt_all_condi<-cbind(res_avg_rt_all_condi,perform$avg_rt)
eval(parse(text = paste0("correct_post_all_condi$'",ii,"'= c(correct_post_all_condi$'",ii,"',perform$correct_post)")))
eval(parse(text = paste0("incorrect_post_all_condi$'",ii,"'= c(incorrect_post_all_condi$'",ii,"',perform$incorrect_post)")))
}
result_fn<-rbind(result_fn,res_fn_all_condi)
result_fp<-rbind(result_fp,res_fp_all_condi)
result_avg_rt<-rbind(result_avg_rt,res_avg_rt_all_condi)
}
#summary_fn<-colMeans(result_fn, na.rm = TRUE)
#summary_fp<-colMeans(result_fp, na.rm = TRUE)
#summary_matrix<-rbind(t(condi_matri),summary_fn,summary_fp)
return(list(fn=result_fn,fp=result_fp,avg_rt=result_avg_rt,incorrect =incorrect_post_all_condi,correct = correct_post_all_condi ))
}
person_num<-c(2000)
item_num<-c(50)
#expo_rate_ppl<-c(0.1,0.2,0.4,0.6,0.9)
#expo_rate_item<-c(0.1,0.2,0.4,0.6,0.9)
expo_rate_ppl<-c(0)
expo_rate_item<-c(0)
#fix para
#will *-1 when modify
time_up=NULL
time_down=NULL
cof=0.5
k_num=2
perent_lc=10#least choose
#num_fir_total=10 #(#item * #students)????????????????????????
num_sim=30
fit_num_cri=4
c=process(person_num,item_num,expo_rate_ppl,expo_rate_item,time_up,time_down,cof,perent_lc,ad_rate,fit_num_cri,num_sim,k_num)
return(c)
}
a = main()
qchisq(0.05,1)
qchisq(0.01,1)
qchisq(0.01,16)
qchisq(0.05,16)
chisq(0.05,16)
chisq(1/0.05,16)
qchisq(1/0.05,16)
qchisq(0.95,16)
qchisq(p=1-.05,df=1)
sigma2 = c(0.3651192,0.2349968,0.2201532,0.2911479,0.2256780,0.2856171,0.3038714,0.2563130,0.2580326,0.1603814,0.3361352,0.2610238,
0.3670576,0.3438411,0.1741237,0.3841488,0.2326540,0.3248815,0.2729413,0.2476585,0.2178084,0.2149259,0.2358241,0.2313420,
0.1822939,0.3032810,0.3614350,0.2358318,0.2110279,0.3109904,0.1862294,0.2670813,0.2363206,0.1594644,0.3228239,0.1452938,
0.2633447,0.2820275,0.2522379,0.2751802,0.2262609,0.2016036,0.2795704,0.1849564,0.1711379,0.1862983,0.2342673,0.2863126,
0.2291005,0.2520585,0.2264554,0.3586327,0.1818062,0.2516139,0.2541462,0.2270065,0.3796184,0.2100862,0.2168261,0.1855188,
0.3212039,0.2347761,0.2245869,0.2019141,0.2033305,0.2258143,0.3643169,0.2529262,0.1727384,0.2504383,0.2408523,0.2113485,
0.2063776,0.2149833,0.2634422,0.1531668,0.3509103,0.1702862,0.1444872,0.2490874,0.2231339,0.3402722,0.3730479,0.1730702,
0.1964125,0.2886590,0.2297702,0.1929067,0.1792876,0.1733645,0.2350384,0.2165464,0.2537119,0.1902463,0.1687232,0.2128237,
0.2288813,0.3283973,0.1548096,0.1596253,0.2645222,0.2318002,0.1847373,0.2576931,0.2822850,0.1867014)
a = log(sigma2)
hist(a,100)
hist(sigma2,100)
hist(a,50)
hist(a,10)
hist(sigma2,10)
pchisq(0.05,1)
pchisq(0.05,12)
pchisq(0.95,12)
pchisq(0.95,1)
0.02/(sqrt(0.097)*sqrt(0.029))
exp(3.4)/exp(4)
exp(3.7)/exp(4)
exp(2.8)/exp(4)
exp(3.1)/exp(4)
a = rnorm(100000,0,1)
b = rnorm(10000,-1,0.3)
c = c(a,b)
d = density(c)
plot(d)
plot(density(c(rnorm(100000,0,1),rnorm(10000,-2.5,0.3))))
plot(density(c(rnorm(100000,0,1),rnorm(50000,-2.5,0.3))))
plot(density(c(rnorm(100000,0,1),rnorm(25000,-2.5,0.3))))
plot(density(c(rnorm(100000,0,1),rnorm(20000,-2.5,0.15))))
plot(density(c(rnorm(100000,0,1),rnorm(20000,-2.5,0.2))))
plot(density(c(rnorm(100000,0,1),rnorm(20000,-2.5,0.3))))
d = c(rnorm(100000,0,1),rnorm(20000,-2.5,0.3))
plot(density(d))
abline(v=mean(d),lwd=4)
d = c(rnorm(100000,0,1),rnorm(20000,-2.5,0.3))
plot(density(d),lwd=4)
abline(v=mean(d),lwd=4)
d = c(rnorm(100000,0,1),rnorm(20000,-2,0.3))
plot(density(d),lwd=4)
abline(v=mean(d),lwd=4)
set.seed(123)
data("headache", package = "datarium")
headache %>% sample_n_by(gender, risk, treatment, size = 1)
install.packages("irtreliability")
irtreliability
library(irtreliability)
irtreliability
set.seed(14)
akX <- runif(15, 0.5, 2)
bkX <- rnorm(15)
data2pl <- matrix(0, nrow = 1000, ncol = 15)
for(i in 1:1000){
ability <- rnorm(1)
data2pl[i,1:15] <- (1 / (1 + exp(-akX *(ability - bkX)))) > runif(15)
}
#Estimate the 2-PL IRT model with package mirt
library(mirt)
sim2pl <- mirt(data.frame(data2pl), 1, "gpcm", SE = TRUE)
mrc2pl <- irtreliability(sim2pl, "GPCM", rep(2, 15), relcoef = "mrc")
sim2pl
summary(sim2pl)
View(mrc2pl)
mrc2pl
sim2pl <- mirt(data.frame(data2pl), 1, "3pl", SE = TRUE)
sim2pl <- mirt(data.frame(data2pl), 1, "3PL", SE = TRUE)
mrc2pl <- irtreliability(sim2pl, "3-PL")
mrc2pl <- irtreliability(sim2pl, "3-PL",rep(2, 15))
mrc2pl <- irtreliability(sim2pl, "3-PL",rep(2, 15), relcoef = "mrc")
mrc2pl <- irtreliability(sim2pl, "3-PL",rep(2, 15), relcoef = "trc")\
mrc2pl <- irtreliability(sim2pl, "3-PL",rep(2, 15), relcoef = "trc")
irtreliability
irttrcbare
View(op)
library(irtoys)
sim
sim
pa <- cbind(runif(20,.8,2), runif(20,-2.4,2.4), rep(0,50))
runif(20,.8,2)
runif(20,-2.4,2.4)
rep(0,50)
pa <- cbind(runif(20,.8,2), runif(20,-2.4,2.4), rep(0,50))
pa <- cbind(runif(20,.8,2), runif(20,-2.4,2.4), rep(0,20))
is.list(ip)
ip=pa
is.list(ip)
i = irf(ip=ip, x=x)
rs <- sim(ip=pa, x=rnorm(1000))
detach("package:irtoys", unload = TRUE)
library(irtoys)
items=NULL
x=NULL
is.null(x)
x = seq(-4, 4, length = 101)
is.null(dim(ip))
!is.null(items)
f = sweep(outer(x, ip[,2], "-"), 2, ip[,1], "*")
View(f)
f = 1 / (1 + exp(-f))
any(ip[,3]!=0)
i = list(x = x, f = f)
dim(i$f)
d = dim(i$f)
u = runif(d[1]*d[2])
View(f)
d
dim(u) = d
View(u)
library(irtoys)
install.packages("mirt")
install.packages("mirt")
ir = as.matrix(read.table('resp.csv', header = FALSE))
rt= as.matrix(read.table('rt.csv', header = FALSE))
data <- simLNIRT(N = 500, K = 20, rho = 0.8, WL = FALSE)
data <- simLNIRT(N = 500, K = 20, rho = 0.8, WL = FALSE)
library('LNIRT')
data <- simLNIRT(N = 500, K = 20, rho = 0.8, WL = FALSE)
out <- LNIRT(RT = RT, Y = Y,  XG = 100, residual = TRUE, WL = FALSE)
out <- LNIRT(data = data, XG = 100, residual = TRUE, WL = FALSE)
out <- LNIRT(RT = data$RT, Y = data$Y,  XG = 100, residual = TRUE, WL = FALSE)
install.packages("LNIRT")
ltimes = data$RT
alpha = data$ab[,1]
beta = data$ab[,2]
n=nrow(ltimes)
resid=ltimes
smasqb=sum(alpha*alpha*beta)
sumasq=sum(alpha*alpha)
i=1
wtdav=sum(alpha*alpha*ltimes[i,])
var(data$theta[,2])
sigmatausqInv=1
mean=beta-(smasqb-wtdav-alpha*alpha*beta+alpha*alpha*ltimes[i,])/(sigmatausqInv+sumasq-alpha*alpha)
var=1/(alpha*alpha)+1/(sigmatausqInv + sumasq - alpha*alpha)
resid[i,]=(ltimes[i,]-mean)/sqrt(var)
R.version.string
updateR()
install.packages("geepack")
library(geepack)
install.packages("testthat")
install.packages("testthat")
cluster
data(npk, package = "datasets")
npk_alias <- glm(yield ~ block + N*P*K, data = npk)
library(AER)
library(clubSandwich)
m <- 20
cluster <- factor(rep(LETTERS[1:m], 3 + rpois(m, 5)))
n <- length(cluster)
id <- factor(c(1:n))
X1 <- c(rep(-0.5, m / 2), rep(0.5, m / 2))[cluster]
X2 <- c(rep(-0.3, 0.4 * m), rep(0.7, 0.3 * m), rep(-0.3, 0.4 * m))[cluster]
X3 <- rnorm(m)[cluster] + rnorm(n)
X4 <- rnorm(n)
X <- cbind(X1, X2, X3, X4)
eta <- -0.4 + X %*% c(0.3, -0.6, 0.15, 0.15)
p <- 1 / (1 + exp(-eta))
summary(p)
w <- sample(1:4, size = n, replace = TRUE)
y1 <- rbinom(n, size = 1, prob = p)
y2 <- rbinom(n, size = w, prob = p)
yp <- y2 / w
dat <- data.frame(y1, y2, yp, X, cluster, w, row = 1:n)
#logit_fit2 <- glm2(y1 ~ X1 + X2 + X3 + X4, data = dat, family = "binomial")
logit_fit <- geeglm(y1 ~ X1 + X2 + X3 + X4, data = dat, family = "binomial",id=cluster)
library(vegan)
data(dune)
data(dune.env)
View(dune.env)
View(dune)
adonis2(dune ~ Management*A1, data = dune.env, by = NULL)
adonis2(dune ~ Management*A1, data = dune.env)
adonis2(dune ~ Management*Use, data = dune.env)
adonis2(A1 ~ Management*dune, data = dune.env)
adonis2(A1 ~ Management*dune, data = dune.env)
adonis2(dune ~ Management*Use, data = dune.env)
adonis2(dune ~ Management*A1, data = dune.env)
adonis2(dune.env ~ Management*A1, data = dune.env)
dune
a = dune$Achimill
adonis2(a ~ Management*A1, data = dune.env)
detach("package:vegan", unload = TRUE)
install.packages("rcompanion")
library(ARTool)
types = c('false_neg_item', 'false_neg_ppl', 'false_posi_item', 'false_posi_ppl', 'precision_item', 'precision_ppl')
for (ele in types){
data = read.csv(file = paste('result_mid/',ele,".csv",sep = ""),header = FALSE)[,c(5,6,7,8,9)]
colnames(data)=c("ewp_rate", "ci_rate", "iterat_times", "ab_cri", "val")
data = data.frame(data)
data$ewp_rate = factor(data$ewp_rate)
data$ci_rate = factor(data$ci_rate)
data$iterat_times = factor(data$iterat_times)
data$ab_cri = factor(data$ab_cri)
data=data[which(data$ewp_rate!=0 & data$iterat_times!=20& data$iterat_times!=40),]
model = art(val ~ ewp_rate*ci_rate*ab_cri*iterat_times, data = data)
#print(model)
Result = anova(model)
Result$part.eta.sq = with(Result, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
print(ele)
print(Result)
#write.csv(Result, file =  paste('anova/',ele,".csv",sep = ""))
}
setwd("/Users/yiqinpan/OneDrive - University of Florida/research/CAT Detection/detect_preknowledge_in_cat_codes/detection")
library(ARTool)
setwd("/Users/yiqinpan/OneDrive - University of Florida/research/CAT Detection/detect_preknowledge_in_cat_codes/detection")
types = c('false_neg_item', 'false_neg_ppl', 'false_posi_item', 'false_posi_ppl', 'precision_item', 'precision_ppl')
for (ele in types){
data = read.csv(file = paste('result_mid/',ele,".csv",sep = ""),header = FALSE)[,c(5,6,7,8,9)]
colnames(data)=c("ewp_rate", "ci_rate", "iterat_times", "ab_cri", "val")
data = data.frame(data)
data$ewp_rate = factor(data$ewp_rate)
data$ci_rate = factor(data$ci_rate)
data$iterat_times = factor(data$iterat_times)
data$ab_cri = factor(data$ab_cri)
data=data[which(data$ewp_rate!=0 & data$iterat_times!=20& data$iterat_times!=40),]
model = art(val ~ ewp_rate*ci_rate*ab_cri*iterat_times, data = data)
#print(model)
Result = anova(model)
Result$part.eta.sq = with(Result, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
print(ele)
print(Result)
#write.csv(Result, file =  paste('anova/',ele,".csv",sep = ""))
}
library(ARTool)
setwd("/Users/yiqinpan/OneDrive - University of Florida/research/CAT Detection/detect_preknowledge_in_cat_codes/detection")
types = c('false_neg_item', 'false_posi_item', 'precision_item','false_neg_ppl', 'false_posi_ppl',  'precision_ppl')
for (ele in types){
data = read.csv(file = paste('result_mid/',ele,".csv",sep = ""),header = FALSE)[,c(5,6,7,8,9)]
colnames(data)=c("ewp_rate", "ci_rate", "iterat_times", "ab_cri", "val")
data = data.frame(data)
data$ewp_rate = factor(data$ewp_rate)
data$ci_rate = factor(data$ci_rate)
data$iterat_times = factor(data$iterat_times)
data$ab_cri = factor(data$ab_cri)
data=data[which(data$ewp_rate!=0 & data$iterat_times!=20& data$iterat_times!=40),]
model = art(val ~ ewp_rate*ci_rate*ab_cri*iterat_times, data = data)
#print(model)
Result = anova(model)
Result$part.eta.sq = with(Result, `Sum Sq`/(`Sum Sq` + `Sum Sq.res`))
print(ele)
print(Result)
#write.csv(Result, file =  paste('anova/',ele,".csv",sep = ""))
}
